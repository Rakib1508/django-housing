# Generated by Django 4.0.4 on 2022-05-28 09:03

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(error_messages={'invalid': 'Must provide a valid email address.', 'required': 'Must provide a valid email address.'}, max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(error_messages={'max_length': 'First name can be at most 150 characters.', 'required': 'Must provide a first name.'}, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(error_messages={'max_length': 'Last name can be at most 150 characters.', 'required': 'Must provide a last name.'}, max_length=150, verbose_name='last name')),
                ('preferred_name', models.CharField(blank=True, help_text='Name to be used for calling you by. If empty, first name will be used by default.', max_length=150, verbose_name='preferred name')),
                ('gender', models.CharField(blank=True, choices=[('m', 'Male'), ('f', 'Female')], max_length=1, null=True, verbose_name='gender')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, error_messages={'unique': 'A user with that phone number already exists.'}, help_text='Required if two factor authentication is enabled.', max_length=128, null=True, region=None, unique=True, verbose_name='phone number')),
                ('is_active', models.BooleanField(default=False, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('is_verified', models.BooleanField(default=False, help_text='Designates whether a user can enable two factor authentication.', verbose_name='phone number verification status')),
                ('two_factor_authentication', models.BooleanField(default=False, help_text='Designates whether a user uses two factor authentication.', verbose_name='OTP-based authentication')),
                ('profile_picture', models.URLField(blank=True, help_text='profile picture will be used at most places alongside name', verbose_name='profile picture or avatar')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Developer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('developer_nickname', models.CharField(blank=True, max_length=100)),
                ('access_key', models.CharField(max_length=16, unique=True)),
                ('developer_secret_key', models.CharField(max_length=32, unique=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='developer',
            index=models.Index(fields=['access_key'], name='accounts_de_access__37387e_idx'),
        ),
        migrations.AddIndex(
            model_name='developer',
            index=models.Index(fields=['developer_secret_key'], name='accounts_de_develop_535bc1_idx'),
        ),
        migrations.AddConstraint(
            model_name='developer',
            constraint=models.UniqueConstraint(fields=('access_key', 'developer_secret_key'), name='unique_developer_access_credentials'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['username'], name='accounts_ac_usernam_862e8e_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['email'], name='accounts_ac_email_b00920_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['first_name'], name='accounts_ac_first_n_7983cf_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['last_name'], name='accounts_ac_last_na_12b48c_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['preferred_name'], name='accounts_ac_preferr_cc3056_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['gender'], name='accounts_ac_gender_76fa0d_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['phone_number'], name='accounts_ac_phone_n_019c95_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['first_name', 'last_name'], name='accounts_ac_first_n_fae401_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['first_name', 'gender'], name='accounts_ac_first_n_32da31_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['last_name', 'gender'], name='accounts_ac_last_na_8bd2eb_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['preferred_name', 'gender'], name='accounts_ac_preferr_e4827b_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['first_name', 'last_name', 'gender'], name='accounts_ac_first_n_a9b081_idx'),
        ),
    ]
