# Generated by Django 4.0.4 on 2022-04-22 13:41

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(error_messages={'invalid': 'Must provide a valid email address.', 'required': 'Must provide a valid email address.'}, max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(error_messages={'max_length': 'First name can be at most 150 characters.', 'required': 'Must provide a first name.'}, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(error_messages={'max_length': 'Last name can be at most 150 characters.', 'required': 'Must provide a last name.'}, max_length=150, verbose_name='last name')),
                ('preferred_name', models.CharField(blank=True, help_text='Name to be used for calling you by. If empty, first name will be used by default.', max_length=150, verbose_name='preferred name')),
                ('gender', models.CharField(blank=True, choices=[('m', 'Male'), ('f', 'Female')], max_length=1, null=True, verbose_name='gender')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, error_messages={'unique': 'A user with that phone number already exists.'}, help_text='Required if two factor authentication is enabled.', max_length=128, null=True, region=None, unique=True, verbose_name='phone number')),
                ('is_verified', models.BooleanField(default=False, help_text='Designates whether a user can enable two factor authentication.', verbose_name='phone number verification status')),
                ('two_factor_authentication', models.BooleanField(default=False, help_text='Designates whether a user uses two factor authentication.', verbose_name='OTP-based authentication')),
                ('verification_code', models.CharField(blank=True, help_text='temporary password with an expiration in 1 minutes', max_length=6, null=True, verbose_name='one time verification code')),
                ('verification_code_expiry', models.DateTimeField(blank=True, help_text='verification code expires after 1 minutes of creation', null=True, verbose_name='verification code expiry time')),
                ('failed_verification_attempts', models.IntegerField(blank=True, default=0, help_text='consecutive number of failed attempts for verification', verbose_name='consecutive failed verification attempted')),
                ('failed_login_attempts', models.IntegerField(blank=True, default=0, help_text='consecutive number of failed attempts for logging in', verbose_name='consecutive failed login attempts')),
                ('disallow_login', models.DateTimeField(blank=True, default=None, help_text='account suspended for some time due to repeated failed login', verbose_name='account frozen temporarily')),
                ('profile_picture', models.URLField(blank=True, help_text='profile picture will be used at most places alongside name', verbose_name='profile picture or avatar')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['username'], name='username_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['email'], name='email_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['first_name'], name='first_name_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['last_name'], name='last_name_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['preferred_name'], name='preferred_name_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['gender'], name='gender_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['phone_number'], name='phone_number_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['first_name', 'last_name'], name='full_name_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['first_name', 'gender'], name='first_name_gender_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['last_name', 'gender'], name='last_name_gender_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['preferred_name', 'gender'], name='preferred_name_gender_idx'),
        ),
        migrations.AddIndex(
            model_name='account',
            index=models.Index(fields=['first_name', 'last_name', 'gender'], name='full_name_gender_idx'),
        ),
    ]
